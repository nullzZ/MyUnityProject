// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roleProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from roleProto.proto</summary>
public static partial class RoleProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for roleProto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RoleProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9yb2xlUHJvdG8ucHJvdG8iMgoMTG9naW5SZXF1ZXN0EhEKCXNlc3Npb25J",
          "ZBgBIAEoCRIPCgd1ZHBQb3J0GAIgASgHIloKDUxvZ2luUmVzcG9uc2USDQoF",
          "c3RhdGUYASABKAcSEwoLZmlnaHRSb2xlSWQYAiABKAYSJQoNZmlnaHRSb2xl",
          "SW5mbxgDIAMoCzIOLkZpZ2h0Um9sZUluZm8iJwoRUmVhZHlTdGF0ZVJlcXVl",
          "c3QSEgoKcmVhZHlTdGF0ZRgBIAEoByI9ChJSZWFkeVN0YXRlUmVzcG9uc2US",
          "JwoOZmlnaHRSZWFkeUluZm8YASADKAsyDy5GaWdodFJlYWR5SW5mbyIUChJT",
          "dGFydEZpZ2h0UmVzb25wc2UiQQoNRmlnaHRSb2xlSW5mbxITCgtmaWdodFJv",
          "bGVJZBgBIAEoBhIMCgRuYW1lGAIgASgJEg0KBWxldmVsGAMgASgHIjkKDkZp",
          "Z2h0UmVhZHlJbmZvEhMKC2ZpZ2h0Um9sZUlkGAEgASgGEhIKCnJlYWR5U3Rh",
          "dGUYAiABKAciFAoSUmVnaXN0ZXJVRFBSZXF1ZXN0IiQKE1JlZ2lzdGVyVURQ",
          "UmVzcG9uc2USDQoFc3RhdGUYASABKAciPwoQU3RhdGVJbmZvUmVxdWVzdBIM",
          "CgRkYXRhGAEgASgMEh0KCXN0YXRlSW5mbxgCIAEoCzIKLlN0YXRlSW5mbyJA",
          "ChFTdGF0ZUluZm9SZXNwb25zZRIMCgRkYXRhGAEgASgMEh0KCXN0YXRlSW5m",
          "bxgCIAEoCzIKLlN0YXRlSW5mbyI0ChNTdGF0ZUFsbEluZm9SZXF1ZXN0Eh0K",
          "CXN0YXRlSW5mbxgBIAMoCzIKLlN0YXRlSW5mbyI1ChRTdGF0ZUFsbEluZm9S",
          "ZXNwb25zZRIdCglzdGF0ZUluZm8YASADKAsyCi5TdGF0ZUluZm8iQwoJU3Rh",
          "dGVJbmZvEgkKAXgYASABKAISCQoBeRgCIAEoAhILCgNkaXIYAyABKAcSEwoL",
          "ZmlnaHRSb2xlSWQYBCABKAZCJQoYY29tLmdhbWUuc2VydmVyLnByb3RvYnVm",
          "QglSb2xlUHJvdG9iBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginRequest), global::LoginRequest.Parser, new[]{ "SessionId", "UdpPort" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginResponse), global::LoginResponse.Parser, new[]{ "State", "FightRoleId", "FightRoleInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadyStateRequest), global::ReadyStateRequest.Parser, new[]{ "ReadyState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadyStateResponse), global::ReadyStateResponse.Parser, new[]{ "FightReadyInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StartFightResonpse), global::StartFightResonpse.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FightRoleInfo), global::FightRoleInfo.Parser, new[]{ "FightRoleId", "Name", "Level" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FightReadyInfo), global::FightReadyInfo.Parser, new[]{ "FightRoleId", "ReadyState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterUDPRequest), global::RegisterUDPRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterUDPResponse), global::RegisterUDPResponse.Parser, new[]{ "State" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StateInfoRequest), global::StateInfoRequest.Parser, new[]{ "Data", "StateInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StateInfoResponse), global::StateInfoResponse.Parser, new[]{ "Data", "StateInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StateAllInfoRequest), global::StateAllInfoRequest.Parser, new[]{ "StateInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StateAllInfoResponse), global::StateAllInfoResponse.Parser, new[]{ "StateInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StateInfo), global::StateInfo.Parser, new[]{ "X", "Y", "Dir", "FightRoleId" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
  private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest(LoginRequest other) : this() {
    sessionId_ = other.sessionId_;
    udpPort_ = other.udpPort_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest Clone() {
    return new LoginRequest(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private string sessionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "udpPort" field.</summary>
  public const int UdpPortFieldNumber = 2;
  private uint udpPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UdpPort {
    get { return udpPort_; }
    set {
      udpPort_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (UdpPort != other.UdpPort) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (UdpPort != 0) hash ^= UdpPort.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionId);
    }
    if (UdpPort != 0) {
      output.WriteRawTag(21);
      output.WriteFixed32(UdpPort);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (UdpPort != 0) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.UdpPort != 0) {
      UdpPort = other.UdpPort;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          SessionId = input.ReadString();
          break;
        }
        case 21: {
          UdpPort = input.ReadFixed32();
          break;
        }
      }
    }
  }

}

public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
  private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse(LoginResponse other) : this() {
    state_ = other.state_;
    fightRoleId_ = other.fightRoleId_;
    fightRoleInfo_ = other.fightRoleInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse Clone() {
    return new LoginResponse(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private uint state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "fightRoleId" field.</summary>
  public const int FightRoleIdFieldNumber = 2;
  private ulong fightRoleId_;
  /// <summary>
  /// 自己的id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong FightRoleId {
    get { return fightRoleId_; }
    set {
      fightRoleId_ = value;
    }
  }

  /// <summary>Field number for the "fightRoleInfo" field.</summary>
  public const int FightRoleInfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::FightRoleInfo> _repeated_fightRoleInfo_codec
      = pb::FieldCodec.ForMessage(26, global::FightRoleInfo.Parser);
  private readonly pbc::RepeatedField<global::FightRoleInfo> fightRoleInfo_ = new pbc::RepeatedField<global::FightRoleInfo>();
  /// <summary>
  /// 这场战斗的其他玩家基本数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FightRoleInfo> FightRoleInfo {
    get { return fightRoleInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    if (FightRoleId != other.FightRoleId) return false;
    if(!fightRoleInfo_.Equals(other.fightRoleInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (State != 0) hash ^= State.GetHashCode();
    if (FightRoleId != 0UL) hash ^= FightRoleId.GetHashCode();
    hash ^= fightRoleInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (State != 0) {
      output.WriteRawTag(13);
      output.WriteFixed32(State);
    }
    if (FightRoleId != 0UL) {
      output.WriteRawTag(17);
      output.WriteFixed64(FightRoleId);
    }
    fightRoleInfo_.WriteTo(output, _repeated_fightRoleInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (State != 0) {
      size += 1 + 4;
    }
    if (FightRoleId != 0UL) {
      size += 1 + 8;
    }
    size += fightRoleInfo_.CalculateSize(_repeated_fightRoleInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.FightRoleId != 0UL) {
      FightRoleId = other.FightRoleId;
    }
    fightRoleInfo_.Add(other.fightRoleInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          State = input.ReadFixed32();
          break;
        }
        case 17: {
          FightRoleId = input.ReadFixed64();
          break;
        }
        case 26: {
          fightRoleInfo_.AddEntriesFrom(input, _repeated_fightRoleInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ReadyStateRequest : pb::IMessage<ReadyStateRequest> {
  private static readonly pb::MessageParser<ReadyStateRequest> _parser = new pb::MessageParser<ReadyStateRequest>(() => new ReadyStateRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadyStateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadyStateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadyStateRequest(ReadyStateRequest other) : this() {
    readyState_ = other.readyState_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadyStateRequest Clone() {
    return new ReadyStateRequest(this);
  }

  /// <summary>Field number for the "readyState" field.</summary>
  public const int ReadyStateFieldNumber = 1;
  private uint readyState_;
  /// <summary>
  /// 准备进度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ReadyState {
    get { return readyState_; }
    set {
      readyState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadyStateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadyStateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReadyState != other.ReadyState) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ReadyState != 0) hash ^= ReadyState.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ReadyState != 0) {
      output.WriteRawTag(13);
      output.WriteFixed32(ReadyState);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ReadyState != 0) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadyStateRequest other) {
    if (other == null) {
      return;
    }
    if (other.ReadyState != 0) {
      ReadyState = other.ReadyState;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          ReadyState = input.ReadFixed32();
          break;
        }
      }
    }
  }

}

public sealed partial class ReadyStateResponse : pb::IMessage<ReadyStateResponse> {
  private static readonly pb::MessageParser<ReadyStateResponse> _parser = new pb::MessageParser<ReadyStateResponse>(() => new ReadyStateResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadyStateResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadyStateResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadyStateResponse(ReadyStateResponse other) : this() {
    fightReadyInfo_ = other.fightReadyInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadyStateResponse Clone() {
    return new ReadyStateResponse(this);
  }

  /// <summary>Field number for the "fightReadyInfo" field.</summary>
  public const int FightReadyInfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::FightReadyInfo> _repeated_fightReadyInfo_codec
      = pb::FieldCodec.ForMessage(10, global::FightReadyInfo.Parser);
  private readonly pbc::RepeatedField<global::FightReadyInfo> fightReadyInfo_ = new pbc::RepeatedField<global::FightReadyInfo>();
  /// <summary>
  /// fixed32 state = 1;//准备完毕可以
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FightReadyInfo> FightReadyInfo {
    get { return fightReadyInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadyStateResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadyStateResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!fightReadyInfo_.Equals(other.fightReadyInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= fightReadyInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fightReadyInfo_.WriteTo(output, _repeated_fightReadyInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fightReadyInfo_.CalculateSize(_repeated_fightReadyInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadyStateResponse other) {
    if (other == null) {
      return;
    }
    fightReadyInfo_.Add(other.fightReadyInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          fightReadyInfo_.AddEntriesFrom(input, _repeated_fightReadyInfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 真正的开始战斗
/// </summary>
public sealed partial class StartFightResonpse : pb::IMessage<StartFightResonpse> {
  private static readonly pb::MessageParser<StartFightResonpse> _parser = new pb::MessageParser<StartFightResonpse>(() => new StartFightResonpse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StartFightResonpse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartFightResonpse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartFightResonpse(StartFightResonpse other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartFightResonpse Clone() {
    return new StartFightResonpse(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StartFightResonpse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StartFightResonpse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StartFightResonpse other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class FightRoleInfo : pb::IMessage<FightRoleInfo> {
  private static readonly pb::MessageParser<FightRoleInfo> _parser = new pb::MessageParser<FightRoleInfo>(() => new FightRoleInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FightRoleInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FightRoleInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FightRoleInfo(FightRoleInfo other) : this() {
    fightRoleId_ = other.fightRoleId_;
    name_ = other.name_;
    level_ = other.level_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FightRoleInfo Clone() {
    return new FightRoleInfo(this);
  }

  /// <summary>Field number for the "fightRoleId" field.</summary>
  public const int FightRoleIdFieldNumber = 1;
  private ulong fightRoleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong FightRoleId {
    get { return fightRoleId_; }
    set {
      fightRoleId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private uint level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FightRoleInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FightRoleInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FightRoleId != other.FightRoleId) return false;
    if (Name != other.Name) return false;
    if (Level != other.Level) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FightRoleId != 0UL) hash ^= FightRoleId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FightRoleId != 0UL) {
      output.WriteRawTag(9);
      output.WriteFixed64(FightRoleId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Level != 0) {
      output.WriteRawTag(29);
      output.WriteFixed32(Level);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FightRoleId != 0UL) {
      size += 1 + 8;
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Level != 0) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FightRoleInfo other) {
    if (other == null) {
      return;
    }
    if (other.FightRoleId != 0UL) {
      FightRoleId = other.FightRoleId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          FightRoleId = input.ReadFixed64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 29: {
          Level = input.ReadFixed32();
          break;
        }
      }
    }
  }

}

public sealed partial class FightReadyInfo : pb::IMessage<FightReadyInfo> {
  private static readonly pb::MessageParser<FightReadyInfo> _parser = new pb::MessageParser<FightReadyInfo>(() => new FightReadyInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FightReadyInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FightReadyInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FightReadyInfo(FightReadyInfo other) : this() {
    fightRoleId_ = other.fightRoleId_;
    readyState_ = other.readyState_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FightReadyInfo Clone() {
    return new FightReadyInfo(this);
  }

  /// <summary>Field number for the "fightRoleId" field.</summary>
  public const int FightRoleIdFieldNumber = 1;
  private ulong fightRoleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong FightRoleId {
    get { return fightRoleId_; }
    set {
      fightRoleId_ = value;
    }
  }

  /// <summary>Field number for the "readyState" field.</summary>
  public const int ReadyStateFieldNumber = 2;
  private uint readyState_;
  /// <summary>
  /// 准备状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ReadyState {
    get { return readyState_; }
    set {
      readyState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FightReadyInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FightReadyInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FightRoleId != other.FightRoleId) return false;
    if (ReadyState != other.ReadyState) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FightRoleId != 0UL) hash ^= FightRoleId.GetHashCode();
    if (ReadyState != 0) hash ^= ReadyState.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FightRoleId != 0UL) {
      output.WriteRawTag(9);
      output.WriteFixed64(FightRoleId);
    }
    if (ReadyState != 0) {
      output.WriteRawTag(21);
      output.WriteFixed32(ReadyState);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FightRoleId != 0UL) {
      size += 1 + 8;
    }
    if (ReadyState != 0) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FightReadyInfo other) {
    if (other == null) {
      return;
    }
    if (other.FightRoleId != 0UL) {
      FightRoleId = other.FightRoleId;
    }
    if (other.ReadyState != 0) {
      ReadyState = other.ReadyState;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          FightRoleId = input.ReadFixed64();
          break;
        }
        case 21: {
          ReadyState = input.ReadFixed32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// udp注册
/// </summary>
public sealed partial class RegisterUDPRequest : pb::IMessage<RegisterUDPRequest> {
  private static readonly pb::MessageParser<RegisterUDPRequest> _parser = new pb::MessageParser<RegisterUDPRequest>(() => new RegisterUDPRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterUDPRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterUDPRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterUDPRequest(RegisterUDPRequest other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterUDPRequest Clone() {
    return new RegisterUDPRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterUDPRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterUDPRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterUDPRequest other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// udp注册
/// </summary>
public sealed partial class RegisterUDPResponse : pb::IMessage<RegisterUDPResponse> {
  private static readonly pb::MessageParser<RegisterUDPResponse> _parser = new pb::MessageParser<RegisterUDPResponse>(() => new RegisterUDPResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterUDPResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterUDPResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterUDPResponse(RegisterUDPResponse other) : this() {
    state_ = other.state_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterUDPResponse Clone() {
    return new RegisterUDPResponse(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private uint state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterUDPResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterUDPResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (State != 0) hash ^= State.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (State != 0) {
      output.WriteRawTag(13);
      output.WriteFixed32(State);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (State != 0) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterUDPResponse other) {
    if (other == null) {
      return;
    }
    if (other.State != 0) {
      State = other.State;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          State = input.ReadFixed32();
          break;
        }
      }
    }
  }

}

public sealed partial class StateInfoRequest : pb::IMessage<StateInfoRequest> {
  private static readonly pb::MessageParser<StateInfoRequest> _parser = new pb::MessageParser<StateInfoRequest>(() => new StateInfoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StateInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfoRequest(StateInfoRequest other) : this() {
    data_ = other.data_;
    StateInfo = other.stateInfo_ != null ? other.StateInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfoRequest Clone() {
    return new StateInfoRequest(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "stateInfo" field.</summary>
  public const int StateInfoFieldNumber = 2;
  private global::StateInfo stateInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StateInfo StateInfo {
    get { return stateInfo_; }
    set {
      stateInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StateInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StateInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    if (!object.Equals(StateInfo, other.StateInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (stateInfo_ != null) hash ^= StateInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
    if (stateInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(StateInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (stateInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StateInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    if (other.stateInfo_ != null) {
      if (stateInfo_ == null) {
        stateInfo_ = new global::StateInfo();
      }
      StateInfo.MergeFrom(other.StateInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
        case 18: {
          if (stateInfo_ == null) {
            stateInfo_ = new global::StateInfo();
          }
          input.ReadMessage(stateInfo_);
          break;
        }
      }
    }
  }

}

public sealed partial class StateInfoResponse : pb::IMessage<StateInfoResponse> {
  private static readonly pb::MessageParser<StateInfoResponse> _parser = new pb::MessageParser<StateInfoResponse>(() => new StateInfoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StateInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfoResponse(StateInfoResponse other) : this() {
    data_ = other.data_;
    StateInfo = other.stateInfo_ != null ? other.StateInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfoResponse Clone() {
    return new StateInfoResponse(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "stateInfo" field.</summary>
  public const int StateInfoFieldNumber = 2;
  private global::StateInfo stateInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StateInfo StateInfo {
    get { return stateInfo_; }
    set {
      stateInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StateInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StateInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    if (!object.Equals(StateInfo, other.StateInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (stateInfo_ != null) hash ^= StateInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
    if (stateInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(StateInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (stateInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StateInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    if (other.stateInfo_ != null) {
      if (stateInfo_ == null) {
        stateInfo_ = new global::StateInfo();
      }
      StateInfo.MergeFrom(other.StateInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
        case 18: {
          if (stateInfo_ == null) {
            stateInfo_ = new global::StateInfo();
          }
          input.ReadMessage(stateInfo_);
          break;
        }
      }
    }
  }

}

public sealed partial class StateAllInfoRequest : pb::IMessage<StateAllInfoRequest> {
  private static readonly pb::MessageParser<StateAllInfoRequest> _parser = new pb::MessageParser<StateAllInfoRequest>(() => new StateAllInfoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StateAllInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateAllInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateAllInfoRequest(StateAllInfoRequest other) : this() {
    stateInfo_ = other.stateInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateAllInfoRequest Clone() {
    return new StateAllInfoRequest(this);
  }

  /// <summary>Field number for the "stateInfo" field.</summary>
  public const int StateInfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StateInfo> _repeated_stateInfo_codec
      = pb::FieldCodec.ForMessage(10, global::StateInfo.Parser);
  private readonly pbc::RepeatedField<global::StateInfo> stateInfo_ = new pbc::RepeatedField<global::StateInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::StateInfo> StateInfo {
    get { return stateInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StateAllInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StateAllInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!stateInfo_.Equals(other.stateInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= stateInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    stateInfo_.WriteTo(output, _repeated_stateInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += stateInfo_.CalculateSize(_repeated_stateInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StateAllInfoRequest other) {
    if (other == null) {
      return;
    }
    stateInfo_.Add(other.stateInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          stateInfo_.AddEntriesFrom(input, _repeated_stateInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class StateAllInfoResponse : pb::IMessage<StateAllInfoResponse> {
  private static readonly pb::MessageParser<StateAllInfoResponse> _parser = new pb::MessageParser<StateAllInfoResponse>(() => new StateAllInfoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StateAllInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateAllInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateAllInfoResponse(StateAllInfoResponse other) : this() {
    stateInfo_ = other.stateInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateAllInfoResponse Clone() {
    return new StateAllInfoResponse(this);
  }

  /// <summary>Field number for the "stateInfo" field.</summary>
  public const int StateInfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StateInfo> _repeated_stateInfo_codec
      = pb::FieldCodec.ForMessage(10, global::StateInfo.Parser);
  private readonly pbc::RepeatedField<global::StateInfo> stateInfo_ = new pbc::RepeatedField<global::StateInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::StateInfo> StateInfo {
    get { return stateInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StateAllInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StateAllInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!stateInfo_.Equals(other.stateInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= stateInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    stateInfo_.WriteTo(output, _repeated_stateInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += stateInfo_.CalculateSize(_repeated_stateInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StateAllInfoResponse other) {
    if (other == null) {
      return;
    }
    stateInfo_.Add(other.stateInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          stateInfo_.AddEntriesFrom(input, _repeated_stateInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class StateInfo : pb::IMessage<StateInfo> {
  private static readonly pb::MessageParser<StateInfo> _parser = new pb::MessageParser<StateInfo>(() => new StateInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StateInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleProtoReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfo(StateInfo other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    dir_ = other.dir_;
    fightRoleId_ = other.fightRoleId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StateInfo Clone() {
    return new StateInfo(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "dir" field.</summary>
  public const int DirFieldNumber = 3;
  private uint dir_;
  /// <summary>
  /// 方向
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Dir {
    get { return dir_; }
    set {
      dir_ = value;
    }
  }

  /// <summary>Field number for the "fightRoleId" field.</summary>
  public const int FightRoleIdFieldNumber = 4;
  private ulong fightRoleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong FightRoleId {
    get { return fightRoleId_; }
    set {
      fightRoleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StateInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StateInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Dir != other.Dir) return false;
    if (FightRoleId != other.FightRoleId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    if (Dir != 0) hash ^= Dir.GetHashCode();
    if (FightRoleId != 0UL) hash ^= FightRoleId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Dir != 0) {
      output.WriteRawTag(29);
      output.WriteFixed32(Dir);
    }
    if (FightRoleId != 0UL) {
      output.WriteRawTag(33);
      output.WriteFixed64(FightRoleId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Dir != 0) {
      size += 1 + 4;
    }
    if (FightRoleId != 0UL) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StateInfo other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Dir != 0) {
      Dir = other.Dir;
    }
    if (other.FightRoleId != 0UL) {
      FightRoleId = other.FightRoleId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Dir = input.ReadFixed32();
          break;
        }
        case 33: {
          FightRoleId = input.ReadFixed64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
